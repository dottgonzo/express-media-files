"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai = require("chai");
var rpj = require("request-promise-json");
var child_process_1 = require("child_process");
var expect = chai.expect;
var serverstart;
var token;
describe('main test express media files for restricted systems', function () {
    this.timeout(20000);
    before(function (cb) {
        serverstart = child_process_1.fork(__dirname + '/../testserver', [], { silent: false });
        setTimeout(function () {
            cb();
        }, 1000);
    });
    describe(' server is running?', function () {
        it('answer to ping request', function (done) {
            rpj.get('http://localhost:3000/restricted/ping').then(function (a) {
                expect(a).to.be.ok;
                expect(a).to.have.property('pong').that.eq('ok');
                done();
            }).catch(function (err) {
                done(new Error(err));
            });
        });
        it('get test token (for test only)', function (done) {
            rpj.get('http://localhost:3000/testtoken').then(function (a) {
                expect(a).to.be.ok;
                expect(a).to.have.property('token').that.is.ok;
                token = a.token;
                done();
            }).catch(function (err) {
                done(new Error(err));
            });
        });
    });
    describe('check list', function () {
        it('get list for user', function (done) {
            rpj.get('http://localhost:3000/restricted/user/' + token + '/list').then(function (a) {
                expect(a).to.be.ok;
                expect(a).to.have.property('list').that.is.an('Array');
                done();
            }).catch(function (err) {
                done(new Error(err));
            });
        });
    });
    after(function (cb) {
        serverstart.kill();
        cb();
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,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SSxDQUFDLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7WUFDeEIsQ0FBQyxDQUFDLENBQUE7UUFDTixDQUFDLENBQUMsQ0FBQTtJQUVOLENBQUMsQ0FBQyxDQUFBO0lBSUYsS0FBSyxDQUFDLFVBQVUsRUFBRTtRQUVkLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtRQUNsQixFQUFFLEVBQUUsQ0FBQTtJQUNSLENBQUMsQ0FBQyxDQUFBO0FBRU4sQ0FBQyxDQUFDLENBQUEiLCJmaWxlIjoidGVzdC9yZXN0cmljdGVkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2hhaSBmcm9tIFwiY2hhaVwiO1xuXG5cbmltcG9ydCAqIGFzIHJwaiBmcm9tIFwicmVxdWVzdC1wcm9taXNlLWpzb25cIjtcblxuaW1wb3J0IHsgZm9yayB9IGZyb20gXCJjaGlsZF9wcm9jZXNzXCI7XG5cbmNvbnN0IGV4cGVjdCA9IGNoYWkuZXhwZWN0XG5cbmxldCBzZXJ2ZXJzdGFydFxubGV0IHRva2VuXG5cbmRlc2NyaWJlKCdtYWluIHRlc3QgZXhwcmVzcyBtZWRpYSBmaWxlcyBmb3IgcmVzdHJpY3RlZCBzeXN0ZW1zJywgZnVuY3Rpb24gKCkge1xuICAgIHRoaXMudGltZW91dCgyMDAwMClcbiAgICBiZWZvcmUoZnVuY3Rpb24gKGNiKSB7XG5cblxuICAgICAgICBzZXJ2ZXJzdGFydCA9IGZvcmsoX19kaXJuYW1lICsgJy8uLi90ZXN0c2VydmVyJywgW10sIHsgc2lsZW50OiBmYWxzZSB9KVxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGNiKClcbiAgICAgICAgfSwgMTAwMClcblxuICAgIH0pXG5cbiAgICBkZXNjcmliZSgnIHNlcnZlciBpcyBydW5uaW5nPycsIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICBpdCgnYW5zd2VyIHRvIHBpbmcgcmVxdWVzdCcsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgICAgICBycGouZ2V0KCdodHRwOi8vbG9jYWxob3N0OjMwMDAvcmVzdHJpY3RlZC9waW5nJykudGhlbigoYSkgPT4ge1xuXG4gICAgICAgICAgICAgICAgZXhwZWN0KGEpLnRvLmJlLm9rXG4gICAgICAgICAgICAgICAgZXhwZWN0KGEpLnRvLmhhdmUucHJvcGVydHkoJ3BvbmcnKS50aGF0LmVxKCdvaycpXG4gICAgICAgICAgICAgICAgZG9uZSgpXG5cbiAgICAgICAgICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICBkb25lKG5ldyBFcnJvcihlcnIpKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcblxuICAgICAgICBpdCgnZ2V0IHRlc3QgdG9rZW4gKGZvciB0ZXN0IG9ubHkpJywgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgICAgIHJwai5nZXQoJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMC90ZXN0dG9rZW4nKS50aGVuKChhKSA9PiB7XG5cbiAgICAgICAgICAgICAgICBleHBlY3QoYSkudG8uYmUub2tcbiAgICAgICAgICAgICAgICBleHBlY3QoYSkudG8uaGF2ZS5wcm9wZXJ0eSgndG9rZW4nKS50aGF0LmlzLm9rXG4gICAgICAgICAgICAgICAgdG9rZW4gPSBhLnRva2VuXG4gICAgICAgICAgICAgICAgZG9uZSgpXG5cbiAgICAgICAgICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICBkb25lKG5ldyBFcnJvcihlcnIpKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcblxuXG4gICAgfSlcblxuXG5cbiAgICBkZXNjcmliZSgnY2hlY2sgbGlzdCcsIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICBpdCgnZ2V0IGxpc3QgZm9yIHVzZXInLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICAgICAgcnBqLmdldCgnaHR0cDovL2xvY2FsaG9zdDozMDAwL3Jlc3RyaWN0ZWQvdXNlci8nICsgdG9rZW4gKyAnL2xpc3QnKS50aGVuKChhKSA9PiB7XG5cbiAgICAgICAgICAgICAgICBleHBlY3QoYSkudG8uYmUub2tcbiAgICAgICAgICAgICAgICBleHBlY3QoYSkudG8uaGF2ZS5wcm9wZXJ0eSgnbGlzdCcpLnRoYXQuaXMuYW4oJ0FycmF5JylcbiAgICAgICAgICAgICAgICBkb25lKClcblxuICAgICAgICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIGRvbmUobmV3IEVycm9yKGVycikpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuXG4gICAgfSlcblxuXG5cbiAgICBhZnRlcihmdW5jdGlvbiAoY2IpIHtcblxuICAgICAgICBzZXJ2ZXJzdGFydC5raWxsKClcbiAgICAgICAgY2IoKVxuICAgIH0pXG5cbn0pXG5cbiJdfQ==
