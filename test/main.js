"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai = require("chai");
var rpj = require("request-promise-json");
var child_process_1 = require("child_process");
var expect = chai.expect;
var serverstart;
describe('main test express media files for open systems', function () {
    this.timeout(20000);
    before(function (cb) {
        serverstart = child_process_1.fork(__dirname + '/../testserver', [], { silent: false });
        setTimeout(function () {
            cb();
        }, 1000);
    });
    describe(' server is running?', function () {
        it('answer to ping request', function (done) {
            rpj.get('http://localhost:3000/ping').then(function (a) {
                expect(a).to.be.ok;
                expect(a).to.have.property('pong').that.eq('ok');
                done();
            }).catch(function (err) {
                done(new Error(err));
            });
        });
    });
    describe('check list as rootuser', function () {
        it('works as rootuser', function (done) {
            rpj.get('http://localhost:3000/list').then(function (a) {
                expect(a).to.be.ok;
                expect(a).to.have.property('list').that.is.an('Array');
                done();
            }).catch(function (err) {
                done(new Error(err));
            });
        });
    });
    after(function (cb) {
        serverstart.kill();
        cb();
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvbWFpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJCQUE2QjtBQUc3QiwwQ0FBNEM7QUFFNUMsK0NBQXFDO0FBRXJDLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUE7QUFFMUIsSUFBSSxXQUFXLENBQUE7QUFHZixRQUFRLENBQUMsZ0RBQWdELEVBQUU7SUFDdkQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUNuQixNQUFNLENBQUMsVUFBVSxFQUFFO1FBQ2YsV0FBVyxHQUFHLG9CQUFJLENBQUMsU0FBUyxHQUFHLGdCQUFnQixFQUFFLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFBO1FBQ3ZFLFVBQVUsQ0FBQztZQUNQLEVBQUUsRUFBRSxDQUFBO1FBQ1IsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFBO0lBQ1osQ0FBQyxDQUFDLENBQUE7SUFFRixRQUFRLENBQUMscUJBQXFCLEVBQUU7UUFFNUIsRUFBRSxDQUFDLHdCQUF3QixFQUFFLFVBQVUsSUFBSTtZQUN2QyxHQUFHLENBQUMsR0FBRyxDQUFDLDRCQUE0QixDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsQ0FBQztnQkFFekMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFBO2dCQUNsQixNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQTtnQkFDaEQsSUFBSSxFQUFFLENBQUE7WUFFVixDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBQyxHQUFHO2dCQUNULElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO1lBQ3hCLENBQUMsQ0FBQyxDQUFBO1FBQ04sQ0FBQyxDQUFDLENBQUE7SUFFTixDQUFDLENBQUMsQ0FBQTtJQUlGLFFBQVEsQ0FBQyx3QkFBd0IsRUFBRTtRQUUvQixFQUFFLENBQUMsbUJBQW1CLEVBQUUsVUFBVSxJQUFJO1lBQ2xDLEdBQUcsQ0FBQyxHQUFHLENBQUMsNEJBQTRCLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQyxDQUFDO2dCQUV6QyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUE7Z0JBQ2xCLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQTtnQkFDdEQsSUFBSSxFQUFFLENBQUE7WUFFVixDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBQyxHQUFHO2dCQUNULElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO1lBQ3hCLENBQUMsQ0FBQyxDQUFBO1FBQ04sQ0FBQyxDQUFDLENBQUE7SUFHTixDQUFDLENBQUMsQ0FBQTtJQUdGLEtBQUssQ0FBQyxVQUFVLEVBQUU7UUFFZCxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUE7UUFDbEIsRUFBRSxFQUFFLENBQUE7SUFDUixDQUFDLENBQUMsQ0FBQTtBQUlOLENBQUMsQ0FBQyxDQUFBIiwiZmlsZSI6InRlc3QvbWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNoYWkgZnJvbSBcImNoYWlcIjtcblxuXG5pbXBvcnQgKiBhcyBycGogZnJvbSBcInJlcXVlc3QtcHJvbWlzZS1qc29uXCI7XG5cbmltcG9ydCB7IGZvcmsgfSBmcm9tIFwiY2hpbGRfcHJvY2Vzc1wiO1xuXG5jb25zdCBleHBlY3QgPSBjaGFpLmV4cGVjdFxuXG5sZXQgc2VydmVyc3RhcnRcblxuXG5kZXNjcmliZSgnbWFpbiB0ZXN0IGV4cHJlc3MgbWVkaWEgZmlsZXMgZm9yIG9wZW4gc3lzdGVtcycsIGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnRpbWVvdXQoMjAwMDApXG4gICAgYmVmb3JlKGZ1bmN0aW9uIChjYikge1xuICAgICAgICBzZXJ2ZXJzdGFydCA9IGZvcmsoX19kaXJuYW1lICsgJy8uLi90ZXN0c2VydmVyJywgW10sIHsgc2lsZW50OiBmYWxzZSB9KVxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGNiKClcbiAgICAgICAgfSwgMTAwMClcbiAgICB9KVxuXG4gICAgZGVzY3JpYmUoJyBzZXJ2ZXIgaXMgcnVubmluZz8nLCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgaXQoJ2Fuc3dlciB0byBwaW5nIHJlcXVlc3QnLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICAgICAgcnBqLmdldCgnaHR0cDovL2xvY2FsaG9zdDozMDAwL3BpbmcnKS50aGVuKChhKSA9PiB7XG5cbiAgICAgICAgICAgICAgICBleHBlY3QoYSkudG8uYmUub2tcbiAgICAgICAgICAgICAgICBleHBlY3QoYSkudG8uaGF2ZS5wcm9wZXJ0eSgncG9uZycpLnRoYXQuZXEoJ29rJylcbiAgICAgICAgICAgICAgICBkb25lKClcblxuICAgICAgICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIGRvbmUobmV3IEVycm9yKGVycikpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuXG4gICAgfSlcblxuXG5cbiAgICBkZXNjcmliZSgnY2hlY2sgbGlzdCBhcyByb290dXNlcicsIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICBpdCgnd29ya3MgYXMgcm9vdHVzZXInLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICAgICAgcnBqLmdldCgnaHR0cDovL2xvY2FsaG9zdDozMDAwL2xpc3QnKS50aGVuKChhKSA9PiB7XG5cbiAgICAgICAgICAgICAgICBleHBlY3QoYSkudG8uYmUub2tcbiAgICAgICAgICAgICAgICBleHBlY3QoYSkudG8uaGF2ZS5wcm9wZXJ0eSgnbGlzdCcpLnRoYXQuaXMuYW4oJ0FycmF5JylcbiAgICAgICAgICAgICAgICBkb25lKClcblxuICAgICAgICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIGRvbmUobmV3IEVycm9yKGVycikpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuXG5cbiAgICB9KVxuXG5cbiAgICBhZnRlcihmdW5jdGlvbiAoY2IpIHtcblxuICAgICAgICBzZXJ2ZXJzdGFydC5raWxsKClcbiAgICAgICAgY2IoKVxuICAgIH0pXG5cblxuXG59KVxuXG4iXX0=
